# command-line-arguments
"".movesmall4 STEXT nosplit size=59 args=0x0 locals=0x10
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:13)	TEXT	"".movesmall4(SB), NOSPLIT|ABIInternal, $16-0
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:13)	SUBQ	$16, SP
	0x0004 00004 (/usr/local/go/test/codegen/copy.go:13)	MOVQ	BP, 8(SP)
	0x0009 00009 (/usr/local/go/test/codegen/copy.go:13)	LEAQ	8(SP), BP
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:13)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:13)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:14)	MOVL	$0, "".x+4(SP)
	0x0016 00022 (/usr/local/go/test/codegen/copy.go:14)	MOVL	$67305985, "".x+4(SP)
	0x001e 00030 (/usr/local/go/test/codegen/copy.go:21)	MOVBLZX	"".x+6(SP), AX
	0x0023 00035 (/usr/local/go/test/codegen/copy.go:21)	MOVWLZX	"".x+4(SP), CX
	0x0028 00040 (/usr/local/go/test/codegen/copy.go:21)	MOVW	CX, "".x+5(SP)
	0x002d 00045 (/usr/local/go/test/codegen/copy.go:21)	MOVB	AL, "".x+7(SP)
	0x0031 00049 (/usr/local/go/test/codegen/copy.go:21)	MOVQ	8(SP), BP
	0x0036 00054 (/usr/local/go/test/codegen/copy.go:21)	ADDQ	$16, SP
	0x003a 00058 (/usr/local/go/test/codegen/copy.go:21)	RET
	0x0000 48 83 ec 10 48 89 6c 24 08 48 8d 6c 24 08 c7 44  H...H.l$.H.l$..D
	0x0010 24 04 00 00 00 00 c7 44 24 04 01 02 03 04 0f b6  $......D$.......
	0x0020 44 24 06 0f b7 4c 24 04 66 89 4c 24 05 88 44 24  D$...L$.f.L$..D$
	0x0030 07 48 8b 6c 24 08 48 83 c4 10 c3                 .H.l$.H....
"".movesmall7 STEXT nosplit size=58 args=0x0 locals=0x10
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:24)	TEXT	"".movesmall7(SB), NOSPLIT|ABIInternal, $16-0
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:24)	SUBQ	$16, SP
	0x0004 00004 (/usr/local/go/test/codegen/copy.go:24)	MOVQ	BP, 8(SP)
	0x0009 00009 (/usr/local/go/test/codegen/copy.go:24)	LEAQ	8(SP), BP
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:24)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:24)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:25)	MOVL	$67305985, "".x+1(SP)
	0x0016 00022 (/usr/local/go/test/codegen/copy.go:25)	MOVL	$117835012, "".x+4(SP)
	0x001e 00030 (/usr/local/go/test/codegen/copy.go:31)	MOVWLZX	"".x+5(SP), AX
	0x0023 00035 (/usr/local/go/test/codegen/copy.go:31)	MOVL	"".x+1(SP), CX
	0x0027 00039 (/usr/local/go/test/codegen/copy.go:31)	MOVL	CX, "".x+2(SP)
	0x002b 00043 (/usr/local/go/test/codegen/copy.go:31)	MOVW	AX, "".x+6(SP)
	0x0030 00048 (/usr/local/go/test/codegen/copy.go:31)	MOVQ	8(SP), BP
	0x0035 00053 (/usr/local/go/test/codegen/copy.go:31)	ADDQ	$16, SP
	0x0039 00057 (/usr/local/go/test/codegen/copy.go:31)	RET
	0x0000 48 83 ec 10 48 89 6c 24 08 48 8d 6c 24 08 c7 44  H...H.l$.H.l$..D
	0x0010 24 01 01 02 03 04 c7 44 24 04 04 05 06 07 0f b7  $......D$.......
	0x0020 44 24 05 8b 4c 24 01 89 4c 24 02 66 89 44 24 06  D$..L$..L$.f.D$.
	0x0030 48 8b 6c 24 08 48 83 c4 10 c3                    H.l$.H....
"".movesmall16 STEXT nosplit size=72 args=0x0 locals=0x18
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:34)	TEXT	"".movesmall16(SB), NOSPLIT|ABIInternal, $24-0
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:34)	SUBQ	$24, SP
	0x0004 00004 (/usr/local/go/test/codegen/copy.go:34)	MOVQ	BP, 16(SP)
	0x0009 00009 (/usr/local/go/test/codegen/copy.go:34)	LEAQ	16(SP), BP
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:34)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:34)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:35)	MOVQ	$578437695752307201, AX
	0x0018 00024 (/usr/local/go/test/codegen/copy.go:35)	MOVQ	AX, "".x(SP)
	0x001c 00028 (/usr/local/go/test/codegen/copy.go:35)	MOVQ	$1157159078456920585, AX
	0x0026 00038 (/usr/local/go/test/codegen/copy.go:35)	MOVQ	AX, "".x+8(SP)
	0x002b 00043 (/usr/local/go/test/codegen/copy.go:39)	MOVQ	"".x+7(SP), AX
	0x0030 00048 (/usr/local/go/test/codegen/copy.go:39)	MOVQ	"".x(SP), CX
	0x0034 00052 (/usr/local/go/test/codegen/copy.go:39)	MOVQ	CX, "".x+1(SP)
	0x0039 00057 (/usr/local/go/test/codegen/copy.go:39)	MOVQ	AX, "".x+8(SP)
	0x003e 00062 (/usr/local/go/test/codegen/copy.go:39)	MOVQ	16(SP), BP
	0x0043 00067 (/usr/local/go/test/codegen/copy.go:39)	ADDQ	$24, SP
	0x0047 00071 (/usr/local/go/test/codegen/copy.go:39)	RET
	0x0000 48 83 ec 18 48 89 6c 24 10 48 8d 6c 24 10 48 b8  H...H.l$.H.l$.H.
	0x0010 01 02 03 04 05 06 07 08 48 89 04 24 48 b8 09 0a  ........H..$H...
	0x0020 0b 0c 0d 0e 0f 10 48 89 44 24 08 48 8b 44 24 07  ......H.D$.H.D$.
	0x0030 48 8b 0c 24 48 89 4c 24 01 48 89 44 24 08 48 8b  H..$H.L$.H.D$.H.
	0x0040 6c 24 10 48 83 c4 18 c3                          l$.H....
"".moveDisjointStack32 STEXT nosplit size=59 args=0x0 locals=0x28
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:46)	TEXT	"".moveDisjointStack32(SB), NOSPLIT|ABIInternal, $40-0
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:46)	SUBQ	$40, SP
	0x0004 00004 (/usr/local/go/test/codegen/copy.go:46)	MOVQ	BP, 32(SP)
	0x0009 00009 (/usr/local/go/test/codegen/copy.go:46)	LEAQ	32(SP), BP
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:46)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:46)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:47)	XORPS	X0, X0
	0x0011 00017 (/usr/local/go/test/codegen/copy.go:47)	MOVUPS	X0, "".s(SP)
	0x0015 00021 (/usr/local/go/test/codegen/copy.go:47)	MOVUPS	X0, "".s+16(SP)
	0x001a 00026 (/usr/local/go/test/codegen/copy.go:52)	MOVUPS	"".x(SB), X0
	0x0021 00033 (/usr/local/go/test/codegen/copy.go:52)	MOVUPS	X0, "".s(SP)
	0x0025 00037 (/usr/local/go/test/codegen/copy.go:52)	MOVUPS	"".x+16(SB), X0
	0x002c 00044 (/usr/local/go/test/codegen/copy.go:52)	MOVUPS	X0, "".s+16(SP)
	0x0031 00049 (/usr/local/go/test/codegen/copy.go:54)	MOVQ	32(SP), BP
	0x0036 00054 (/usr/local/go/test/codegen/copy.go:54)	ADDQ	$40, SP
	0x003a 00058 (/usr/local/go/test/codegen/copy.go:54)	RET
	0x0000 48 83 ec 28 48 89 6c 24 20 48 8d 6c 24 20 0f 57  H..(H.l$ H.l$ .W
	0x0010 c0 0f 11 04 24 0f 11 44 24 10 0f 10 05 00 00 00  ....$..D$.......
	0x0020 00 0f 11 04 24 0f 10 05 00 00 00 00 0f 11 44 24  ....$.........D$
	0x0030 10 48 8b 6c 24 20 48 83 c4 28 c3                 .H.l$ H..(.
	rel 29+4 t=16 "".x+0
	rel 40+4 t=16 "".x+16
"".moveDisjointStack64 STEXT nosplit size=93 args=0x0 locals=0x68
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:56)	TEXT	"".moveDisjointStack64(SB), NOSPLIT|ABIInternal, $104-0
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:56)	SUBQ	$104, SP
	0x0004 00004 (/usr/local/go/test/codegen/copy.go:56)	MOVQ	BP, 96(SP)
	0x0009 00009 (/usr/local/go/test/codegen/copy.go:56)	LEAQ	96(SP), BP
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:56)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:56)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x000e 00014 (/usr/local/go/test/codegen/copy.go:57)	LEAQ	"".s(SP), DI
	0x0012 00018 (/usr/local/go/test/codegen/copy.go:57)	XORPS	X0, X0
	0x0015 00021 (/usr/local/go/test/codegen/copy.go:57)	LEAQ	-32(DI), DI
	0x0019 00025 (/usr/local/go/test/codegen/copy.go:57)	NOP
	0x0020 00032 (/usr/local/go/test/codegen/copy.go:57)	DUFFZERO	$273
	0x0033 00051 (/usr/local/go/test/codegen/copy.go:62)	LEAQ	"".s(SP), DI
	0x0037 00055 (/usr/local/go/test/codegen/copy.go:62)	LEAQ	"".x(SB), SI
	0x003e 00062 (/usr/local/go/test/codegen/copy.go:62)	NOP
	0x0040 00064 (/usr/local/go/test/codegen/copy.go:62)	DUFFCOPY	$812
	0x0053 00083 (/usr/local/go/test/codegen/copy.go:64)	MOVQ	96(SP), BP
	0x0058 00088 (/usr/local/go/test/codegen/copy.go:64)	ADDQ	$104, SP
	0x005c 00092 (/usr/local/go/test/codegen/copy.go:64)	RET
	0x0000 48 83 ec 68 48 89 6c 24 60 48 8d 6c 24 60 48 8d  H..hH.l$`H.l$`H.
	0x0010 3c 24 0f 57 c0 48 8d 7f e0 0f 1f 80 00 00 00 00  <$.W.H..........
	0x0020 48 89 6c 24 f0 48 8d 6c 24 f0 e8 00 00 00 00 48  H.l$.H.l$......H
	0x0030 8b 6d 00 48 8d 3c 24 48 8d 35 00 00 00 00 66 90  .m.H.<$H.5....f.
	0x0040 48 89 6c 24 f0 48 8d 6c 24 f0 e8 00 00 00 00 48  H.l$.H.l$......H
	0x0050 8b 6d 00 48 8b 6c 24 60 48 83 c4 68 c3           .m.H.l$`H..h.
	rel 43+4 t=8 runtime.duffzero+273
	rel 58+4 t=16 "".x+0
	rel 75+4 t=8 runtime.duffcopy+812
"".moveDisjointStack STEXT size=141 args=0x0 locals=0x108
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:66)	TEXT	"".moveDisjointStack(SB), ABIInternal, $264-0
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:66)	MOVQ	(TLS), CX
	0x0009 00009 (/usr/local/go/test/codegen/copy.go:66)	LEAQ	-136(SP), AX
	0x0011 00017 (/usr/local/go/test/codegen/copy.go:66)	CMPQ	AX, 16(CX)
	0x0015 00021 (/usr/local/go/test/codegen/copy.go:66)	PCDATA	$0, $-2
	0x0015 00021 (/usr/local/go/test/codegen/copy.go:66)	JLS	131
	0x0017 00023 (/usr/local/go/test/codegen/copy.go:66)	PCDATA	$0, $-1
	0x0017 00023 (/usr/local/go/test/codegen/copy.go:66)	SUBQ	$264, SP
	0x001e 00030 (/usr/local/go/test/codegen/copy.go:66)	MOVQ	BP, 256(SP)
	0x0026 00038 (/usr/local/go/test/codegen/copy.go:66)	LEAQ	256(SP), BP
	0x002e 00046 (/usr/local/go/test/codegen/copy.go:66)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x002e 00046 (/usr/local/go/test/codegen/copy.go:66)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x002e 00046 (/usr/local/go/test/codegen/copy.go:67)	LEAQ	"".s(SP), DI
	0x0032 00050 (/usr/local/go/test/codegen/copy.go:67)	XORPS	X0, X0
	0x0035 00053 (/usr/local/go/test/codegen/copy.go:67)	NOP
	0x0040 00064 (/usr/local/go/test/codegen/copy.go:67)	DUFFZERO	$228
	0x0053 00083 (/usr/local/go/test/codegen/copy.go:74)	LEAQ	"".s(SP), DI
	0x0057 00087 (/usr/local/go/test/codegen/copy.go:74)	LEAQ	"".x(SB), SI
	0x005e 00094 (/usr/local/go/test/codegen/copy.go:74)	NOP
	0x0060 00096 (/usr/local/go/test/codegen/copy.go:74)	DUFFCOPY	$672
	0x0073 00115 (/usr/local/go/test/codegen/copy.go:76)	MOVQ	256(SP), BP
	0x007b 00123 (/usr/local/go/test/codegen/copy.go:76)	ADDQ	$264, SP
	0x0082 00130 (/usr/local/go/test/codegen/copy.go:76)	RET
	0x0083 00131 (/usr/local/go/test/codegen/copy.go:76)	NOP
	0x0083 00131 (/usr/local/go/test/codegen/copy.go:66)	PCDATA	$1, $-1
	0x0083 00131 (/usr/local/go/test/codegen/copy.go:66)	PCDATA	$0, $-2
	0x0083 00131 (/usr/local/go/test/codegen/copy.go:66)	CALL	runtime.morestack_noctxt(SB)
	0x0088 00136 (/usr/local/go/test/codegen/copy.go:66)	PCDATA	$0, $-1
	0x0088 00136 (/usr/local/go/test/codegen/copy.go:66)	JMP	0
	0x0000 64 48 8b 0c 25 00 00 00 00 48 8d 84 24 78 ff ff  dH..%....H..$x..
	0x0010 ff 48 3b 41 10 76 6c 48 81 ec 08 01 00 00 48 89  .H;A.vlH......H.
	0x0020 ac 24 00 01 00 00 48 8d ac 24 00 01 00 00 48 8d  .$....H..$....H.
	0x0030 3c 24 0f 57 c0 66 0f 1f 84 00 00 00 00 00 66 90  <$.W.f........f.
	0x0040 48 89 6c 24 f0 48 8d 6c 24 f0 e8 00 00 00 00 48  H.l$.H.l$......H
	0x0050 8b 6d 00 48 8d 3c 24 48 8d 35 00 00 00 00 66 90  .m.H.<$H.5....f.
	0x0060 48 89 6c 24 f0 48 8d 6c 24 f0 e8 00 00 00 00 48  H.l$.H.l$......H
	0x0070 8b 6d 00 48 8b ac 24 00 01 00 00 48 81 c4 08 01  .m.H..$....H....
	0x0080 00 00 c3 e8 00 00 00 00 e9 73 ff ff ff           .........s...
	rel 5+4 t=17 TLS+0
	rel 75+4 t=8 runtime.duffzero+228
	rel 90+4 t=16 "".x+0
	rel 107+4 t=8 runtime.duffcopy+672
	rel 132+4 t=8 runtime.morestack_noctxt+0
"".moveDisjointArg STEXT size=147 args=0x8 locals=0x108
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:78)	TEXT	"".moveDisjointArg(SB), ABIInternal, $264-8
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:78)	MOVQ	(TLS), CX
	0x0009 00009 (/usr/local/go/test/codegen/copy.go:78)	LEAQ	-136(SP), AX
	0x0011 00017 (/usr/local/go/test/codegen/copy.go:78)	CMPQ	AX, 16(CX)
	0x0015 00021 (/usr/local/go/test/codegen/copy.go:78)	PCDATA	$0, $-2
	0x0015 00021 (/usr/local/go/test/codegen/copy.go:78)	JLS	137
	0x0017 00023 (/usr/local/go/test/codegen/copy.go:78)	PCDATA	$0, $-1
	0x0017 00023 (/usr/local/go/test/codegen/copy.go:78)	SUBQ	$264, SP
	0x001e 00030 (/usr/local/go/test/codegen/copy.go:78)	MOVQ	BP, 256(SP)
	0x0026 00038 (/usr/local/go/test/codegen/copy.go:78)	LEAQ	256(SP), BP
	0x002e 00046 (/usr/local/go/test/codegen/copy.go:78)	FUNCDATA	$0, gclocals·1a65e721a2ccc325b382662e7ffee780(SB)
	0x002e 00046 (/usr/local/go/test/codegen/copy.go:78)	FUNCDATA	$1, gclocals·69c1753bd5f81501d95132d08af04464(SB)
	0x002e 00046 (/usr/local/go/test/codegen/copy.go:79)	LEAQ	"".s(SP), DI
	0x0032 00050 (/usr/local/go/test/codegen/copy.go:79)	XORPS	X0, X0
	0x0035 00053 (/usr/local/go/test/codegen/copy.go:79)	NOP
	0x0040 00064 (/usr/local/go/test/codegen/copy.go:79)	DUFFZERO	$228
	0x0053 00083 (/usr/local/go/test/codegen/copy.go:86)	MOVQ	"".b+272(SP), SI
	0x005b 00091 (/usr/local/go/test/codegen/copy.go:86)	TESTB	AL, (SI)
	0x005d 00093 (/usr/local/go/test/codegen/copy.go:86)	LEAQ	"".s(SP), DI
	0x0061 00097 (/usr/local/go/test/codegen/copy.go:86)	CMPQ	SI, DI
	0x0064 00100 (/usr/local/go/test/codegen/copy.go:86)	JEQ	121
	0x0066 00102 (/usr/local/go/test/codegen/copy.go:86)	DUFFCOPY	$672
	0x0079 00121 (/usr/local/go/test/codegen/copy.go:88)	MOVQ	256(SP), BP
	0x0081 00129 (/usr/local/go/test/codegen/copy.go:88)	ADDQ	$264, SP
	0x0088 00136 (/usr/local/go/test/codegen/copy.go:88)	RET
	0x0089 00137 (/usr/local/go/test/codegen/copy.go:88)	NOP
	0x0089 00137 (/usr/local/go/test/codegen/copy.go:78)	PCDATA	$1, $-1
	0x0089 00137 (/usr/local/go/test/codegen/copy.go:78)	PCDATA	$0, $-2
	0x0089 00137 (/usr/local/go/test/codegen/copy.go:78)	CALL	runtime.morestack_noctxt(SB)
	0x008e 00142 (/usr/local/go/test/codegen/copy.go:78)	PCDATA	$0, $-1
	0x008e 00142 (/usr/local/go/test/codegen/copy.go:78)	JMP	0
	0x0000 64 48 8b 0c 25 00 00 00 00 48 8d 84 24 78 ff ff  dH..%....H..$x..
	0x0010 ff 48 3b 41 10 76 72 48 81 ec 08 01 00 00 48 89  .H;A.vrH......H.
	0x0020 ac 24 00 01 00 00 48 8d ac 24 00 01 00 00 48 8d  .$....H..$....H.
	0x0030 3c 24 0f 57 c0 66 0f 1f 84 00 00 00 00 00 66 90  <$.W.f........f.
	0x0040 48 89 6c 24 f0 48 8d 6c 24 f0 e8 00 00 00 00 48  H.l$.H.l$......H
	0x0050 8b 6d 00 48 8b b4 24 10 01 00 00 84 06 48 8d 3c  .m.H..$......H.<
	0x0060 24 48 39 fe 74 13 48 89 6c 24 f0 48 8d 6c 24 f0  $H9.t.H.l$.H.l$.
	0x0070 e8 00 00 00 00 48 8b 6d 00 48 8b ac 24 00 01 00  .....H.m.H..$...
	0x0080 00 48 81 c4 08 01 00 00 c3 e8 00 00 00 00 e9 6d  .H.............m
	0x0090 ff ff ff                                         ...
	rel 5+4 t=17 TLS+0
	rel 75+4 t=8 runtime.duffzero+228
	rel 113+4 t=8 runtime.duffcopy+672
	rel 138+4 t=8 runtime.morestack_noctxt+0
"".moveDisjointNoOverlap STEXT nosplit size=60 args=0x8 locals=0x8
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:90)	TEXT	"".moveDisjointNoOverlap(SB), NOSPLIT|ABIInternal, $8-8
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:90)	SUBQ	$8, SP
	0x0004 00004 (/usr/local/go/test/codegen/copy.go:90)	MOVQ	BP, (SP)
	0x0008 00008 (/usr/local/go/test/codegen/copy.go:90)	LEAQ	(SP), BP
	0x000c 00012 (/usr/local/go/test/codegen/copy.go:90)	FUNCDATA	$0, gclocals·1a65e721a2ccc325b382662e7ffee780(SB)
	0x000c 00012 (/usr/local/go/test/codegen/copy.go:90)	FUNCDATA	$1, gclocals·69c1753bd5f81501d95132d08af04464(SB)
	0x000c 00012 (/usr/local/go/test/codegen/copy.go:97)	MOVQ	"".a+16(SP), DI
	0x0011 00017 (/usr/local/go/test/codegen/copy.go:97)	LEAQ	128(DI), SI
	0x0018 00024 (/usr/local/go/test/codegen/copy.go:97)	NOP
	0x0020 00032 (/usr/local/go/test/codegen/copy.go:97)	DUFFCOPY	$784
	0x0033 00051 (/usr/local/go/test/codegen/copy.go:97)	MOVQ	(SP), BP
	0x0037 00055 (/usr/local/go/test/codegen/copy.go:97)	ADDQ	$8, SP
	0x003b 00059 (/usr/local/go/test/codegen/copy.go:97)	RET
	0x0000 48 83 ec 08 48 89 2c 24 48 8d 2c 24 48 8b 7c 24  H...H.,$H.,$H.|$
	0x0010 10 48 8d b7 80 00 00 00 0f 1f 84 00 00 00 00 00  .H..............
	0x0020 48 89 6c 24 f0 48 8d 6c 24 f0 e8 00 00 00 00 48  H.l$.H.l$......H
	0x0030 8b 6d 00 48 8b 2c 24 48 83 c4 08 c3              .m.H.,$H....
	rel 43+4 t=8 runtime.duffcopy+784
"".ptrEqual STEXT nosplit size=1 args=0x0 locals=0x0
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:102)	TEXT	"".ptrEqual(SB), NOSPLIT|ABIInternal, $0-0
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:102)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:102)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:107)	RET
	0x0000 c3                                               .
"".ptrOneOffset STEXT size=86 args=0x0 locals=0x20
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:110)	TEXT	"".ptrOneOffset(SB), ABIInternal, $32-0
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:110)	MOVQ	(TLS), CX
	0x0009 00009 (/usr/local/go/test/codegen/copy.go:110)	CMPQ	SP, 16(CX)
	0x000d 00013 (/usr/local/go/test/codegen/copy.go:110)	PCDATA	$0, $-2
	0x000d 00013 (/usr/local/go/test/codegen/copy.go:110)	JLS	79
	0x000f 00015 (/usr/local/go/test/codegen/copy.go:110)	PCDATA	$0, $-1
	0x000f 00015 (/usr/local/go/test/codegen/copy.go:110)	SUBQ	$32, SP
	0x0013 00019 (/usr/local/go/test/codegen/copy.go:110)	MOVQ	BP, 24(SP)
	0x0018 00024 (/usr/local/go/test/codegen/copy.go:110)	LEAQ	24(SP), BP
	0x001d 00029 (/usr/local/go/test/codegen/copy.go:110)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x001d 00029 (/usr/local/go/test/codegen/copy.go:110)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x001d 00029 (/usr/local/go/test/codegen/copy.go:115)	LEAQ	"".x+1(SB), AX
	0x0024 00036 (/usr/local/go/test/codegen/copy.go:115)	MOVQ	AX, (SP)
	0x0028 00040 (/usr/local/go/test/codegen/copy.go:115)	LEAQ	"".x(SB), AX
	0x002f 00047 (/usr/local/go/test/codegen/copy.go:115)	MOVQ	AX, 8(SP)
	0x0034 00052 (/usr/local/go/test/codegen/copy.go:115)	MOVQ	$255, 16(SP)
	0x003d 00061 (/usr/local/go/test/codegen/copy.go:115)	PCDATA	$1, $0
	0x003d 00061 (/usr/local/go/test/codegen/copy.go:115)	NOP
	0x0040 00064 (/usr/local/go/test/codegen/copy.go:115)	CALL	runtime.memmove(SB)
	0x0045 00069 (/usr/local/go/test/codegen/copy.go:115)	MOVQ	24(SP), BP
	0x004a 00074 (/usr/local/go/test/codegen/copy.go:115)	ADDQ	$32, SP
	0x004e 00078 (/usr/local/go/test/codegen/copy.go:115)	RET
	0x004f 00079 (/usr/local/go/test/codegen/copy.go:115)	NOP
	0x004f 00079 (/usr/local/go/test/codegen/copy.go:110)	PCDATA	$1, $-1
	0x004f 00079 (/usr/local/go/test/codegen/copy.go:110)	PCDATA	$0, $-2
	0x004f 00079 (/usr/local/go/test/codegen/copy.go:110)	CALL	runtime.morestack_noctxt(SB)
	0x0054 00084 (/usr/local/go/test/codegen/copy.go:110)	PCDATA	$0, $-1
	0x0054 00084 (/usr/local/go/test/codegen/copy.go:110)	JMP	0
	0x0000 64 48 8b 0c 25 00 00 00 00 48 3b 61 10 76 40 48  dH..%....H;a.v@H
	0x0010 83 ec 20 48 89 6c 24 18 48 8d 6c 24 18 48 8d 05  .. H.l$.H.l$.H..
	0x0020 00 00 00 00 48 89 04 24 48 8d 05 00 00 00 00 48  ....H..$H......H
	0x0030 89 44 24 08 48 c7 44 24 10 ff 00 00 00 0f 1f 00  .D$.H.D$........
	0x0040 e8 00 00 00 00 48 8b 6c 24 18 48 83 c4 20 c3 e8  .....H.l$.H.. ..
	0x0050 00 00 00 00 eb aa                                ......
	rel 5+4 t=17 TLS+0
	rel 32+4 t=16 "".x+1
	rel 43+4 t=16 "".x+0
	rel 65+4 t=8 runtime.memmove+0
	rel 80+4 t=8 runtime.morestack_noctxt+0
"".ptrBothOffset STEXT size=86 args=0x0 locals=0x20
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:118)	TEXT	"".ptrBothOffset(SB), ABIInternal, $32-0
	0x0000 00000 (/usr/local/go/test/codegen/copy.go:118)	MOVQ	(TLS), CX
	0x0009 00009 (/usr/local/go/test/codegen/copy.go:118)	CMPQ	SP, 16(CX)
	0x000d 00013 (/usr/local/go/test/codegen/copy.go:118)	PCDATA	$0, $-2
	0x000d 00013 (/usr/local/go/test/codegen/copy.go:118)	JLS	79
	0x000f 00015 (/usr/local/go/test/codegen/copy.go:118)	PCDATA	$0, $-1
	0x000f 00015 (/usr/local/go/test/codegen/copy.go:118)	SUBQ	$32, SP
	0x0013 00019 (/usr/local/go/test/codegen/copy.go:118)	MOVQ	BP, 24(SP)
	0x0018 00024 (/usr/local/go/test/codegen/copy.go:118)	LEAQ	24(SP), BP
	0x001d 00029 (/usr/local/go/test/codegen/copy.go:118)	FUNCDATA	$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x001d 00029 (/usr/local/go/test/codegen/copy.go:118)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x001d 00029 (/usr/local/go/test/codegen/copy.go:123)	LEAQ	"".x+1(SB), AX
	0x0024 00036 (/usr/local/go/test/codegen/copy.go:123)	MOVQ	AX, (SP)
	0x0028 00040 (/usr/local/go/test/codegen/copy.go:123)	LEAQ	"".x+2(SB), AX
	0x002f 00047 (/usr/local/go/test/codegen/copy.go:123)	MOVQ	AX, 8(SP)
	0x0034 00052 (/usr/local/go/test/codegen/copy.go:123)	MOVQ	$254, 16(SP)
	0x003d 00061 (/usr/local/go/test/codegen/copy.go:123)	PCDATA	$1, $0
	0x003d 00061 (/usr/local/go/test/codegen/copy.go:123)	NOP
	0x0040 00064 (/usr/local/go/test/codegen/copy.go:123)	CALL	runtime.memmove(SB)
	0x0045 00069 (/usr/local/go/test/codegen/copy.go:123)	MOVQ	24(SP), BP
	0x004a 00074 (/usr/local/go/test/codegen/copy.go:123)	ADDQ	$32, SP
	0x004e 00078 (/usr/local/go/test/codegen/copy.go:123)	RET
	0x004f 00079 (/usr/local/go/test/codegen/copy.go:123)	NOP
	0x004f 00079 (/usr/local/go/test/codegen/copy.go:118)	PCDATA	$1, $-1
	0x004f 00079 (/usr/local/go/test/codegen/copy.go:118)	PCDATA	$0, $-2
	0x004f 00079 (/usr/local/go/test/codegen/copy.go:118)	CALL	runtime.morestack_noctxt(SB)
	0x0054 00084 (/usr/local/go/test/codegen/copy.go:118)	PCDATA	$0, $-1
	0x0054 00084 (/usr/local/go/test/codegen/copy.go:118)	JMP	0
	0x0000 64 48 8b 0c 25 00 00 00 00 48 3b 61 10 76 40 48  dH..%....H;a.v@H
	0x0010 83 ec 20 48 89 6c 24 18 48 8d 6c 24 18 48 8d 05  .. H.l$.H.l$.H..
	0x0020 00 00 00 00 48 89 04 24 48 8d 05 00 00 00 00 48  ....H..$H......H
	0x0030 89 44 24 08 48 c7 44 24 10 fe 00 00 00 0f 1f 00  .D$.H.D$........
	0x0040 e8 00 00 00 00 48 8b 6c 24 18 48 83 c4 20 c3 e8  .....H.l$.H.. ..
	0x0050 00 00 00 00 eb aa                                ......
	rel 5+4 t=17 TLS+0
	rel 32+4 t=16 "".x+1
	rel 43+4 t=16 "".x+2
	rel 65+4 t=8 runtime.memmove+0
	rel 80+4 t=8 runtime.morestack_noctxt+0
go.cuinfo.packagename.command-line-arguments SDWARFINFO dupok size=0
	0x0000 63 6f 64 65 67 65 6e                             codegen
""..inittask SNOPTRDATA size=32
	0x0000 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	rel 24+8 t=1 runtime..inittask+0
"".x SNOPTRBSS size=256
""..stmp_0 SRODATA size=7
	0x0000 01 02 03 04 05 06 07                             .......
""..stmp_1 SRODATA size=16
	0x0000 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10  ................
runtime.memequal64·f SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=1 runtime.memequal64+0
runtime.gcbits.01 SRODATA dupok size=1
	0x0000 01                                               .
type..namedata.*[]uint8- SRODATA dupok size=11
	0x0000 00 00 08 2a 5b 5d 75 69 6e 74 38                 ...*[]uint8
type.*[]uint8 SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 a5 8e d0 69 08 08 08 36 00 00 00 00 00 00 00 00  ...i...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=1 runtime.memequal64·f+0
	rel 32+8 t=1 runtime.gcbits.01+0
	rel 40+4 t=5 type..namedata.*[]uint8-+0
	rel 48+8 t=1 type.[]uint8+0
type.[]uint8 SRODATA dupok size=56
	0x0000 18 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 df 7e 2e 38 02 08 08 17 00 00 00 00 00 00 00 00  .~.8............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 32+8 t=1 runtime.gcbits.01+0
	rel 40+4 t=5 type..namedata.*[]uint8-+0
	rel 44+4 t=6 type.*[]uint8+0
	rel 48+8 t=1 type.uint8+0
type..eqfunc256 SRODATA dupok size=16
	0x0000 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00  ................
	rel 0+8 t=1 runtime.memequal_varlen+0
runtime.gcbits. SRODATA dupok size=0
type..namedata.*[256]uint8- SRODATA dupok size=14
	0x0000 00 00 0b 2a 5b 32 35 36 5d 75 69 6e 74 38        ...*[256]uint8
type.[256]uint8 SRODATA dupok size=72
	0x0000 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 9e 9d b0 ff 0a 01 01 11 00 00 00 00 00 00 00 00  ................
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 01 00 00 00 00 00 00                          ........
	rel 24+8 t=1 type..eqfunc256+0
	rel 32+8 t=1 runtime.gcbits.+0
	rel 40+4 t=5 type..namedata.*[256]uint8-+0
	rel 44+4 t=6 type.*[256]uint8+0
	rel 48+8 t=1 type.uint8+0
	rel 56+8 t=1 type.[]uint8+0
type.*[256]uint8 SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 9f 33 f5 ec 08 08 08 36 00 00 00 00 00 00 00 00  .3.....6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=1 runtime.memequal64·f+0
	rel 32+8 t=1 runtime.gcbits.01+0
	rel 40+4 t=5 type..namedata.*[256]uint8-+0
	rel 48+8 t=1 type.[256]uint8+0
type..eqfunc32 SRODATA dupok size=16
	0x0000 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00  ........ .......
	rel 0+8 t=1 runtime.memequal_varlen+0
type..namedata.*[32]uint8- SRODATA dupok size=13
	0x0000 00 00 0a 2a 5b 33 32 5d 75 69 6e 74 38           ...*[32]uint8
type.[32]uint8 SRODATA dupok size=72
	0x0000 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ...............
	0x0010 9c 59 ff a8 0a 01 01 11 00 00 00 00 00 00 00 00  .Y..............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 20 00 00 00 00 00 00 00                           .......
	rel 24+8 t=1 type..eqfunc32+0
	rel 32+8 t=1 runtime.gcbits.+0
	rel 40+4 t=5 type..namedata.*[32]uint8-+0
	rel 44+4 t=6 type.*[32]uint8+0
	rel 48+8 t=1 type.uint8+0
	rel 56+8 t=1 type.[]uint8+0
type.*[32]uint8 SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 f4 c7 79 15 08 08 08 36 00 00 00 00 00 00 00 00  ..y....6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=1 runtime.memequal64·f+0
	rel 32+8 t=1 runtime.gcbits.01+0
	rel 40+4 t=5 type..namedata.*[32]uint8-+0
	rel 48+8 t=1 type.[32]uint8+0
type..eqfunc96 SRODATA dupok size=16
	0x0000 00 00 00 00 00 00 00 00 60 00 00 00 00 00 00 00  ........`.......
	rel 0+8 t=1 runtime.memequal_varlen+0
type..namedata.*[96]uint8- SRODATA dupok size=13
	0x0000 00 00 0a 2a 5b 39 36 5d 75 69 6e 74 38           ...*[96]uint8
type.[96]uint8 SRODATA dupok size=72
	0x0000 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  `...............
	0x0010 c4 41 09 a9 0a 01 01 11 00 00 00 00 00 00 00 00  .A..............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 60 00 00 00 00 00 00 00                          `.......
	rel 24+8 t=1 type..eqfunc96+0
	rel 32+8 t=1 runtime.gcbits.+0
	rel 40+4 t=5 type..namedata.*[96]uint8-+0
	rel 44+4 t=6 type.*[96]uint8+0
	rel 48+8 t=1 type.uint8+0
	rel 56+8 t=1 type.[]uint8+0
type.*[96]uint8 SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 4f 7f 7c c1 08 08 08 36 00 00 00 00 00 00 00 00  O.|....6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=1 runtime.memequal64·f+0
	rel 32+8 t=1 runtime.gcbits.01+0
	rel 40+4 t=5 type..namedata.*[96]uint8-+0
	rel 48+8 t=1 type.[96]uint8+0
runtime.memequal128·f SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=1 runtime.memequal128+0
type..namedata.*[16]uint8- SRODATA dupok size=13
	0x0000 00 00 0a 2a 5b 31 36 5d 75 69 6e 74 38           ...*[16]uint8
type.*[16]uint8 SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 b4 2f 0d 51 08 08 08 36 00 00 00 00 00 00 00 00  ./.Q...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=1 runtime.memequal64·f+0
	rel 32+8 t=1 runtime.gcbits.01+0
	rel 40+4 t=5 type..namedata.*[16]uint8-+0
	rel 48+8 t=1 type.[16]uint8+0
type.[16]uint8 SRODATA dupok size=72
	0x0000 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 b7 7d 35 47 0a 01 01 11 00 00 00 00 00 00 00 00  .}5G............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 10 00 00 00 00 00 00 00                          ........
	rel 24+8 t=1 runtime.memequal128·f+0
	rel 32+8 t=1 runtime.gcbits.+0
	rel 40+4 t=5 type..namedata.*[16]uint8-+0
	rel 44+4 t=6 type.*[16]uint8+0
	rel 48+8 t=1 type.uint8+0
	rel 56+8 t=1 type.[]uint8+0
runtime.memequal32·f SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=1 runtime.memequal32+0
type..namedata.*[4]uint8- SRODATA dupok size=12
	0x0000 00 00 09 2a 5b 34 5d 75 69 6e 74 38              ...*[4]uint8
type.*[4]uint8 SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 47 b3 e3 a1 08 08 08 36 00 00 00 00 00 00 00 00  G......6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=1 runtime.memequal64·f+0
	rel 32+8 t=1 runtime.gcbits.01+0
	rel 40+4 t=5 type..namedata.*[4]uint8-+0
	rel 48+8 t=1 type.[4]uint8+0
type.[4]uint8 SRODATA dupok size=72
	0x0000 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 84 42 18 1c 0a 01 01 11 00 00 00 00 00 00 00 00  .B..............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 04 00 00 00 00 00 00 00                          ........
	rel 24+8 t=1 runtime.memequal32·f+0
	rel 32+8 t=1 runtime.gcbits.+0
	rel 40+4 t=5 type..namedata.*[4]uint8-+0
	rel 44+4 t=6 type.*[4]uint8+0
	rel 48+8 t=1 type.uint8+0
	rel 56+8 t=1 type.[]uint8+0
type..eqfunc7 SRODATA dupok size=16
	0x0000 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00  ................
	rel 0+8 t=1 runtime.memequal_varlen+0
type..namedata.*[7]uint8- SRODATA dupok size=12
	0x0000 00 00 09 2a 5b 37 5d 75 69 6e 74 38              ...*[7]uint8
type.*[7]uint8 SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 23 a4 d1 0f 08 08 08 36 00 00 00 00 00 00 00 00  #......6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=1 runtime.memequal64·f+0
	rel 32+8 t=1 runtime.gcbits.01+0
	rel 40+4 t=5 type..namedata.*[7]uint8-+0
	rel 48+8 t=1 type.[7]uint8+0
type.[7]uint8 SRODATA dupok size=72
	0x0000 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 d5 cf d5 ff 0a 01 01 11 00 00 00 00 00 00 00 00  ................
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 07 00 00 00 00 00 00 00                          ........
	rel 24+8 t=1 type..eqfunc7+0
	rel 32+8 t=1 runtime.gcbits.+0
	rel 40+4 t=5 type..namedata.*[7]uint8-+0
	rel 44+4 t=6 type.*[7]uint8+0
	rel 48+8 t=1 type.uint8+0
	rel 56+8 t=1 type.[]uint8+0
type..importpath.runtime. SRODATA dupok size=10
	0x0000 00 00 07 72 75 6e 74 69 6d 65                    ...runtime
gclocals·33cdeccccebe80329f1fdbee7f5874cb SRODATA dupok size=8
	0x0000 01 00 00 00 00 00 00 00                          ........
gclocals·1a65e721a2ccc325b382662e7ffee780 SRODATA dupok size=10
	0x0000 02 00 00 00 01 00 00 00 01 00                    ..........
gclocals·69c1753bd5f81501d95132d08af04464 SRODATA dupok size=8
	0x0000 02 00 00 00 00 00 00 00                          ........
aux for "".movesmall4 SDWARFLOC size=52
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 16 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00  ........;.......
	0x0020 02 00 91 6c 00 00 00 00 00 00 00 00 00 00 00 00  ...l............
	0x0030 00 00 00 00                                      ....
	rel 8+8 t=1 "".movesmall4+0
aux for "".movesmall4 SDWARFLINES size=22
	0x0000 04 02 0a 03 07 14 9c 06 5f 06 03 02 64 06 41 06  ........_...d.A.
	0x0010 9b 02 0a 00 01 01                                ......
aux for "".movesmall4 SDWARFINFO size=71
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 6d 6f 76 65 73 6d 61 6c  guments.movesmal
	0x0020 6c 34 00 00 00 00 00 00 00 00 00 00 00 00 00 00  l4..............
	0x0030 00 00 00 01 9c 02 00 00 00 01 0b 78 00 0e 00 00  ...........x....
	0x0040 00 00 00 00 00 00 00                             .......
	rel 0+0 t=24 type.[4]uint8+0
	rel 35+8 t=1 "".movesmall4+0
	rel 43+8 t=1 "".movesmall4+59
	rel 62+4 t=29 go.info.[4]uint8+0
	rel 66+4 t=29 +0
aux for "".movesmall7 SDWARFLOC size=52
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 16 00 00 00 00 00 00 00 3a 00 00 00 00 00 00 00  ........:.......
	0x0020 02 00 91 69 00 00 00 00 00 00 00 00 00 00 00 00  ...i............
	0x0030 00 00 00 00                                      ....
	rel 8+8 t=1 "".movesmall7+0
aux for "".movesmall7 SDWARFLINES size=22
	0x0000 04 02 0a 03 12 14 9c 06 5f 06 03 01 64 06 41 06  ........_...d.A.
	0x0010 91 02 0a 00 01 01                                ......
aux for "".movesmall7 SDWARFINFO size=71
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 6d 6f 76 65 73 6d 61 6c  guments.movesmal
	0x0020 6c 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00  l7..............
	0x0030 00 00 00 01 9c 02 00 00 00 01 0b 78 00 19 00 00  ...........x....
	0x0040 00 00 00 00 00 00 00                             .......
	rel 0+0 t=24 type.[7]uint8+0
	rel 35+8 t=1 "".movesmall7+0
	rel 43+8 t=1 "".movesmall7+58
	rel 62+4 t=29 go.info.[7]uint8+0
	rel 66+4 t=29 +0
aux for "".movesmall16 SDWARFLOC size=52
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 18 00 00 00 00 00 00 00 48 00 00 00 00 00 00 00  ........H.......
	0x0020 02 00 91 60 00 00 00 00 00 00 00 00 00 00 00 00  ...`............
	0x0030 00 00 00 00                                      ....
	rel 8+8 t=1 "".movesmall16+0
aux for "".movesmall16 SDWARFLINES size=20
	0x0000 04 02 0a 03 1c 14 9c 06 73 06 d1 06 41 06 9b 02  ........s...A...
	0x0010 0a 00 01 01                                      ....
aux for "".movesmall16 SDWARFINFO size=72
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 6d 6f 76 65 73 6d 61 6c  guments.movesmal
	0x0020 6c 31 36 00 00 00 00 00 00 00 00 00 00 00 00 00  l16.............
	0x0030 00 00 00 00 01 9c 02 00 00 00 01 0b 78 00 23 00  ............x.#.
	0x0040 00 00 00 00 00 00 00 00                          ........
	rel 0+0 t=24 type.[16]uint8+0
	rel 36+8 t=1 "".movesmall16+0
	rel 44+8 t=1 "".movesmall16+72
	rel 63+4 t=29 go.info.[16]uint8+0
	rel 67+4 t=29 +0
aux for "".moveDisjointStack32 SDWARFLOC size=52
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 11 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00  ........;.......
	0x0020 02 00 91 50 00 00 00 00 00 00 00 00 00 00 00 00  ...P............
	0x0030 00 00 00 00                                      ....
	rel 8+8 t=1 "".moveDisjointStack32+0
aux for "".moveDisjointStack32 SDWARFLINES size=20
	0x0000 04 02 0a 03 28 14 9c 06 2d 06 6e 06 55 06 b1 02  ....(...-.n.U...
	0x0010 0a 00 01 01                                      ....
aux for "".moveDisjointStack32 SDWARFINFO size=80
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 6d 6f 76 65 44 69 73 6a  guments.moveDisj
	0x0020 6f 69 6e 74 53 74 61 63 6b 33 32 00 00 00 00 00  ointStack32.....
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 01 9c 02 00  ................
	0x0040 00 00 01 0b 73 00 2f 00 00 00 00 00 00 00 00 00  ....s./.........
	rel 0+0 t=24 type.[32]uint8+0
	rel 44+8 t=1 "".moveDisjointStack32+0
	rel 52+8 t=1 "".moveDisjointStack32+59
	rel 71+4 t=29 go.info.[32]uint8+0
	rel 75+4 t=29 +0
aux for "".moveDisjointStack64 SDWARFLOC size=53
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 12 00 00 00 00 00 00 00 5d 00 00 00 00 00 00 00  ........].......
	0x0020 03 00 91 90 7f 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00                                   .....
	rel 8+8 t=1 "".moveDisjointStack64+0
aux for "".moveDisjointStack64 SDWARFLINES size=22
	0x0000 04 02 0a 03 32 14 9c 06 37 06 08 6e 06 37 06 08  ....2...7..n.7..
	0x0010 39 02 0a 00 01 01                                9.....
aux for "".moveDisjointStack64 SDWARFINFO size=80
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 6d 6f 76 65 44 69 73 6a  guments.moveDisj
	0x0020 6f 69 6e 74 53 74 61 63 6b 36 34 00 00 00 00 00  ointStack64.....
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 01 9c 02 00  ................
	0x0040 00 00 01 0b 73 00 39 00 00 00 00 00 00 00 00 00  ....s.9.........
	rel 0+0 t=24 type.[96]uint8+0
	rel 44+8 t=1 "".moveDisjointStack64+0
	rel 52+8 t=1 "".moveDisjointStack64+93
	rel 71+4 t=29 go.info.[96]uint8+0
	rel 75+4 t=29 +0
aux for "".moveDisjointStack SDWARFLOC size=53
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 32 00 00 00 00 00 00 00 8d 00 00 00 00 00 00 00  2...............
	0x0020 03 00 91 f0 7d 00 00 00 00 00 00 00 00 00 00 00  ....}...........
	0x0030 00 00 00 00 00                                   .....
	rel 8+8 t=1 "".moveDisjointStack+0
aux for "".moveDisjointStack SDWARFLINES size=28
	0x0000 04 02 03 3c 14 0a f5 f6 06 37 06 08 03 02 6e 06  ...<.....7....n.
	0x0010 37 06 08 39 03 7a ab 02 0a 00 01 01              7..9.z......
aux for "".moveDisjointStack SDWARFINFO size=78
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 6d 6f 76 65 44 69 73 6a  guments.moveDisj
	0x0020 6f 69 6e 74 53 74 61 63 6b 00 00 00 00 00 00 00  ointStack.......
	0x0030 00 00 00 00 00 00 00 00 00 00 01 9c 02 00 00 00  ................
	0x0040 01 0b 73 00 43 00 00 00 00 00 00 00 00 00        ..s.C.........
	rel 0+0 t=24 type.[256]uint8+0
	rel 42+8 t=1 "".moveDisjointStack+0
	rel 50+8 t=1 "".moveDisjointStack+141
	rel 69+4 t=29 go.info.[256]uint8+0
	rel 73+4 t=29 +0
aux for "".moveDisjointArg SDWARFLOC size=104
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 93 00 00 00 00 00 00 00  ................
	0x0020 03 00 91 f0 7d 00 00 00 00 00 00 00 00 00 00 00  ....}...........
	0x0030 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 00 00 93 00 00  ................
	0x0050 00 00 00 00 00 01 00 9c 00 00 00 00 00 00 00 00  ................
	0x0060 00 00 00 00 00 00 00 00                          ........
	rel 8+8 t=1 "".moveDisjointArg+0
	rel 61+8 t=1 "".moveDisjointArg+0
aux for "".moveDisjointArg SDWARFLINES size=29
	0x0000 04 02 03 c8 00 14 0a f5 f6 06 37 06 08 03 02 6e  ..........7....n
	0x0010 06 5f 06 08 4d 03 7a ab 02 0a 00 01 01           ._..M.z......
aux for "".moveDisjointArg SDWARFINFO size=89
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 6d 6f 76 65 44 69 73 6a  guments.moveDisj
	0x0020 6f 69 6e 74 41 72 67 00 00 00 00 00 00 00 00 00  ointArg.........
	0x0030 00 00 00 00 00 00 00 00 01 9c 02 00 00 00 01 0b  ................
	0x0040 73 00 4f 00 00 00 00 00 00 00 00 10 62 00 00 4e  s.O.........b..N
	0x0050 00 00 00 00 00 00 00 00 00                       .........
	rel 0+0 t=24 type.*[256]uint8+0
	rel 0+0 t=24 type.[256]uint8+0
	rel 40+8 t=1 "".moveDisjointArg+0
	rel 48+8 t=1 "".moveDisjointArg+147
	rel 67+4 t=29 go.info.[256]uint8+0
	rel 71+4 t=29 +0
	rel 80+4 t=29 go.info.*[256]uint8+0
	rel 84+4 t=29 +53
aux for "".moveDisjointNoOverlap SDWARFLOC size=51
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 3c 00 00 00 00 00 00 00  ........<.......
	0x0020 01 00 9c 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00                                         ...
	rel 8+8 t=1 "".moveDisjointNoOverlap+0
aux for "".moveDisjointNoOverlap SDWARFLINES size=20
	0x0000 04 02 0a 03 d4 00 14 03 02 8c 06 41 06 08 73 02  ...........A..s.
	0x0010 09 00 01 01                                      ....
aux for "".moveDisjointNoOverlap SDWARFINFO size=83
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 6d 6f 76 65 44 69 73 6a  guments.moveDisj
	0x0020 6f 69 6e 74 4e 6f 4f 76 65 72 6c 61 70 00 00 00  ointNoOverlap...
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 9c  ................
	0x0040 02 00 00 00 01 10 61 00 00 5a 00 00 00 00 00 00  ......a..Z......
	0x0050 00 00 00                                         ...
	rel 0+0 t=24 type.*[256]uint8+0
	rel 46+8 t=1 "".moveDisjointNoOverlap+0
	rel 54+8 t=1 "".moveDisjointNoOverlap+60
	rel 74+4 t=29 go.info.*[256]uint8+0
	rel 78+4 t=29 +0
aux for "".ptrEqual SDWARFLINES size=11
	0x0000 04 02 03 e5 00 14 02 01 00 01 01                 ...........
aux for "".ptrEqual SDWARFINFO size=57
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 70 74 72 45 71 75 61 6c  guments.ptrEqual
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 01 9c 02 00 00 00 01 00                       .........
	rel 33+8 t=1 "".ptrEqual+0
	rel 41+8 t=1 "".ptrEqual+1
aux for "".ptrOneOffset SDWARFLINES size=22
	0x0000 04 02 03 e8 00 14 0a a5 a0 06 55 06 08 69 03 7f  ..........U..i..
	0x0010 6f 02 07 00 01 01                                o.....
aux for "".ptrOneOffset SDWARFINFO size=61
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 70 74 72 4f 6e 65 4f 66  guments.ptrOneOf
	0x0020 66 73 65 74 00 00 00 00 00 00 00 00 00 00 00 00  fset............
	0x0030 00 00 00 00 00 01 9c 02 00 00 00 01 00           .............
	rel 37+8 t=1 "".ptrOneOffset+0
	rel 45+8 t=1 "".ptrOneOffset+86
aux for "".ptrBothOffset SDWARFLINES size=22
	0x0000 04 02 03 f0 00 14 0a a5 a0 06 55 06 08 69 03 7f  ..........U..i..
	0x0010 6f 02 07 00 01 01                                o.....
aux for "".ptrBothOffset SDWARFINFO size=62
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 70 74 72 42 6f 74 68 4f  guments.ptrBothO
	0x0020 66 66 73 65 74 00 00 00 00 00 00 00 00 00 00 00  ffset...........
	0x0030 00 00 00 00 00 00 01 9c 02 00 00 00 01 00        ..............
	rel 38+8 t=1 "".ptrBothOffset+0
	rel 46+8 t=1 "".ptrBothOffset+86
